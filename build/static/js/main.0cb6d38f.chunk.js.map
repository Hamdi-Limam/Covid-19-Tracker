{"version":3,"sources":["components/InfoBox/InfoBox.js","components/Map/Map.js","components/LineGraph.js","components/Table/Table.js","util.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","active","isRed","isGreen","title","cases","total","props","Card","className","onClick","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","Map","countries","casesType","center","zoom","TileLayer","url","attribution","data","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","numeral","format","showDataOnMap","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","a","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","Table","marginLeft","sortTable","sort","b","prettyPrintStat","stat","prettyPrintTotalStat","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","mapCountries","setMapCountries","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","setCasesType","sortedData","getCountriesData","getWorldCases","FormControl","Select","variant","onChange","e","countryCode","target","find","iso2","undefined","info","MenuItem","todayCases","todayDeaths","todayRecovered","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0cb6d38f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\n\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({ active, isRed, isGreen, title, cases, total, ...props }) {\r\n  return (\r\n    <Card\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      } `}\r\n      onClick={props.onClick}\r\n    >\r\n      <CardContent>\r\n        <Typography color=\"textSecondary\" className=\"infoBox__title\">\r\n          {title}\r\n        </Typography>\r\n        <h2 className={`infoBox__cases ${isGreen && \"infoBox__cases--green\"}`}>\r\n          {cases} Today\r\n        </h2>\r\n        <Typography color=\"textSecondary\" className=\"infoBox__total\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\nimport numeral from \"numeral\";\r\n\r\nimport \"./Map.css\";\r\n\r\n//Circle Color by cases type\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    multiplier: 300,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    multiplier: 200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    multiplier: 200,\r\n  },\r\n};\r\n\r\n//Draw circles on map with interactive tooltip\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      className=\"circle\"\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          />\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\nfunction LineGraph({ casesType, ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 &&\r\n        (casesType === \"recovered\" ? (\r\n          <Line\r\n            options={options}\r\n            data={{\r\n              datasets: [\r\n                {\r\n                  backgroundColor: \"#d6ff99\",\r\n                  borderColor: \"greenyellow\",\r\n                  data: data,\r\n                },\r\n              ],\r\n            }}\r\n          />\r\n        ) : (\r\n          <Line\r\n            options={options}\r\n            data={{\r\n              datasets: [\r\n                {\r\n                  backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                  borderColor: \"#CC1034\",\r\n                  data: data,\r\n                },\r\n              ],\r\n            }}\r\n          />\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\n\r\nimport \"./Table.css\";\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map(({ country, cases, countryInfo }) => (\r\n        <tr>\r\n          <td\r\n            className=\"table-flag\"\r\n            style={{ backgroundImage: `url(${countryInfo.flag})` }}\r\n          />\r\n          <td>{country}</td>\r\n          <td style={{ marginLeft: \"auto\" }}>\r\n            <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import numeral from \"numeral\";\r\n\r\n//Sort table highest case\r\nexport const sortTable = (data) => {\r\n  const sortedData = [...data];\r\n  return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n};\r\n\r\n//pretty style number to string for today cases\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0,0\")}` : \"+0\";\r\n\r\n//pretty style number to string for total cases\r\nexport const prettyPrintTotalStat = (stat) =>\r\n  stat ? `${numeral(stat).format(\"0,0\")}` : \"0\";\r\n","import React, { useState, useEffect } from \"react\";\nimport {\n  FormControl,\n  MenuItem,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\n\nimport InfoBox from \"./components/InfoBox/InfoBox\";\nimport Map from \"./components/Map/Map\";\nimport LineGraph from \"./components/LineGraph\";\nimport Table from \"./components/Table/Table\";\nimport \"./App.css\";\nimport { sortTable } from \"./util\";\nimport \"leaflet/dist/leaflet.css\";\nimport { prettyPrintStat, prettyPrintTotalStat } from \"./util\";\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34, lng: 9 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  //Fetch all Countries\n  useEffect(() => {\n    //async => send a req, wait for it, do something with info\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data;\n          const sortedData = sortTable(countries);\n          const tableData = sortedData;\n          setTableData(sortedData);\n          const mapCountries = countries;\n          setMapCountries(countries);\n          setCountries(countries);\n        });\n    };\n    getCountriesData();\n  }, []);\n\n  //Fetch Worldwide cases,deathes and recovers\n  const getWorldCases = async () => {\n    await fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  };\n  useEffect(() => {\n    getWorldCases();\n  }, []);\n\n  //Selecting a different country from drop down\n  const onCountryChange = (e) => {\n    const countryCode = e.target.value;\n    setCountry(countryCode);\n    //All of the data from the country response\n    const country = countries.find(\n      (country) => country.countryInfo.iso2 === countryCode\n    );\n    if (country === undefined) {\n      const info = getWorldCases();\n      setCountryInfo(info);\n      setMapCenter({\n        lat: 34,\n        lng: 9,\n      });\n      setMapZoom(3);\n    } else {\n      setCountryInfo(country);\n      setMapCenter({\n        lat: country.countryInfo.lat,\n        lng: country.countryInfo.long,\n      });\n      setMapZoom(6);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"app\">\n        <div className=\"app__left\">\n          <div className=\"app__header\">\n            <h1>Covid-19 Tracker</h1>\n            <FormControl className=\"app__dropdown\">\n              <Select\n                variant=\"outlined\"\n                value={country}\n                onChange={onCountryChange}\n                className=\"app__dropdown--select\"\n              >\n                <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n                {countries.map((country) => (\n                  <MenuItem value={country.countryInfo.iso2}>\n                    {country.country}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </div>\n          <div className=\"app__stats\">\n            <InfoBox\n              isRed\n              active={casesType === \"cases\"}\n              onClick={(e) => setCasesType(\"cases\")}\n              title=\"Coronavirus cases\"\n              cases={prettyPrintStat(countryInfo.todayCases)}\n              total={prettyPrintTotalStat(countryInfo.cases)}\n            />\n            <InfoBox\n              isRed\n              active={casesType === \"deaths\"}\n              onClick={(e) => setCasesType(\"deaths\")}\n              title=\"Deaths\"\n              cases={prettyPrintStat(countryInfo.todayDeaths)}\n              total={prettyPrintTotalStat(countryInfo.deaths)}\n            />\n            <InfoBox\n              isGreen\n              active={casesType === \"recovered\"}\n              onClick={(e) => setCasesType(\"recovered\")}\n              title=\"Recovered\"\n              cases={prettyPrintStat(countryInfo.todayRecovered)}\n              total={prettyPrintTotalStat(countryInfo.recovered)}\n            />\n          </div>\n          <Map\n            countries={mapCountries}\n            center={mapCenter}\n            zoom={mapZoom}\n            casesType={casesType}\n          />\n        </div>\n        <Card className=\"app__right\">\n          <CardContent>\n            <h3 className=\"app__rightTableTitle\">Live Cases by Country</h3>\n            <Table countries={tableData} />\n            <h3 className=\"app__rightGraphTitle\">Worldwide New {casesType}</h3>\n            <LineGraph casesType={casesType} className=\"app__graph\" />\n          </CardContent>\n        </Card>\n      </div>\n      <h5 className=\"app__footer\">\n        © 2020 Hamdi Nait Limam All Rights Reserved\n      </h5>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}